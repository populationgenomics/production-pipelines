[workflow]
# Datasets to load inputs. If not provided, datasets will be determined
# automatically based on the input provider implementation:
#input_datasets = []

# Datasets to skip:
#skip_datasets = []

# Samples to skip:
#skip_samples = []

# Only process the following samples:
#only_samples = []

# Process the following samples even if outputs exist:
#force_samples = []

# Skip these stages:
#skip_stages = []

# Skip all other stages:
#only_stages = []

# Start from this stage:
#first_stages = []

# Finish at this stage:
#last_stages = []

# Force stage rerun
#force_stages = []

# Map of stages to lists of samples, to skip for specific stages
#[workflow.skip_samples_stages]
#CramQC = ['CPG13409']

# Name of the workflow (to prefix output paths)
#name =

# Description of the workflow (to display in the Batch GUI)
#description =

# Suffix the workflow outputs location (`get_workflow().prefix`) with this string. 
# By default, the hash of all input paths will be used.
#output_version = "0.1"

# Check input file existence (e.g. FASTQ files). When they are missing,
# the `skip_samples_with_missing_input` option controls whether such
# samples should be ignored, or it should cause raising an error.
check_inputs = true

# For the first (not-skipped) stage, if the input for a target does
# not exist, just skip this target instead of failing. E.g. if the first
# stage is Align, and `sample.alignment_input` for a sample do not exist,
# remove this sample, instead of failing. In order words, ignore samples
# that are missing results from skipped stages.
skip_samples_with_missing_input = false

# Within jobs, check all in-job intermediate files for possible reuse.
# If set to False, will overwrite all intermediates. Used by `utils.can_reuse(path)`.
check_intermediates = true

# Before running a stage, check if input (i.e. expected outputs from required stages) 
# already exist. If it exists, do not submit stage jobs.
check_expected_outputs = true

# Limit to data of this sequencing type
#sequencing_type = 'genome'

# Realign CRAM when available, instead of using FASTQ.
# The parameter value should correspond to CRAM version
# (e.g. v0 in gs://cpg-fewgenomes-main/cram/v0/CPG01234.cram
#realign_from_cram_version = 'v0'

# Calling intervals (defauls to whole genome intervals)
#intervals_path =

# The GQ bands used for ReblockGVCF, specified as exclusive upper bounds for reference
# confidence GQ bands (must be in [1, 100] and specified in increasing order). Finer
# granularity bands result in more reference blocks and therefore larger GVCFs.
reblock_gq_bands = [20, 30, 40]

# Only print the final merged config and a list of stages to be submitted.
# Will skip any communication with Metamist, Hail Batch, and Cloud Storage, so 
# the code can be run without permissions.
#dry_run = true

# Map internally used validation sample external_id to truth sample names
[validation.sample_map]
HG001_NA12878 = 'na12878'
SYNDIP = 'syndip'

[hail]
delete_scratch_on_exit = false
