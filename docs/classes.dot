digraph "classes_pipeline" {
rankdir=BT
charset="utf-8"
"cpg_pipes.hb.batch.Batch" [color="black", fontcolor="black", label="{Batch|labelled_jobs : dict\l|new_job(name: str, attributes): Job\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.cohort.Cohort" [color="black", fontcolor="black", label="{Cohort|name : str\lpipeline\l|add_project(name): Project\lget_all_samples(): List[Sample]\lget_projects(): List[Project]\lpopulate(smdb: SMDB, input_projects, ...)\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.stage.CohortStage" [color="black", fontcolor="black", label="{CohortStage|\l|_add_to_the_pipeline(pipeline)\lexpected_result(cohort): Dict\lqueue_jobs(cohort, inputs: StageInput): StageOutput\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.pipeline.Pipeline" [color="black", fontcolor="black", label="{Pipeline|batch : Batch\lanalysis_bucket : str\lanalysis_project : Project\lcohort : Cohort\ldb : SMDB\lnamespace : Namespace\loutput_version : str\ltmp_bucket\lweb_bucket\lweb_url\l|set_stages(stages_classes: List[StageDecorator])\lsubmit_batch(dry_run: bool)\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.project.Project" [color="black", fontcolor="black", label="{Project|name\lis_test : bool\lstack : str\l|add_sample(id, external_id, participant_id): Sample\lget_samples(): List[Sample]\lget_bucket(): str\lget_tmp_bucket(): str\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.stage.ProjectStage" [color="black", fontcolor="black", label="{ProjectStage|\l|_add_to_the_pipeline(pipeline)\lexpected_result(project): Dict\lqueue_jobs(project, inputs: StageInput): StageOutput\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.sample.Sample" [color="black", fontcolor="black", label="{Sample|id\lexternal_id\lparticipant_id\lproject : Project\lmeta : dict\lpedigree : PedigreeInfo\lalignment_input : AlignmentInput\lseq : SmSequence\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.stage.SampleStage" [color="black", fontcolor="black", label="{SampleStage|\l|_add_to_the_pipeline(pipeline)\lexpected_result(sample): Dict\lqueue_jobs(sample, inputs: StageInput): StageOutput\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.stage.Stage" [color="black", fontcolor="black", label="{Stage|name\lpipe : Pipeline\loutput_by_target : Dict[str, StageOutput]\lanalysis_type : AnalysisType\lassume_results_exist : bool\lforced : bool\lrequired : bool\lrequired_stages : List[Stage]\lskipped : bool\l|@abstractmethod _add_to_the_pipeline(pipeline)\l@abstractmethod expected_result(target: Target): Dict\l@abstractmethod queue_jobs(target: Target, inputs: StageInput): StageOutput\lmake_outputs(target: Target, data: StageOutputData, jobs: List[Job]): StageOutput\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.target.Target" [color="black", fontcolor="black", label="{Target|active : bool\lforced : bool\l|@abstractmethod unique_id(): str\l}", shape="record", style="solid"];
"cpg_pipes.pipeline.cohort.Cohort" -> "cpg_pipes.pipeline.target.Target" [arrowhead="empty", arrowtail="none"];
"cpg_pipes.pipeline.project.Project" -> "cpg_pipes.pipeline.target.Target" [arrowhead="empty", arrowtail="none"];
"cpg_pipes.pipeline.sample.Sample" -> "cpg_pipes.pipeline.target.Target" [arrowhead="empty", arrowtail="none"];
"cpg_pipes.pipeline.stage.CohortStage" -> "cpg_pipes.pipeline.stage.Stage" [arrowhead="empty", arrowtail="none"];
"cpg_pipes.pipeline.stage.ProjectStage" -> "cpg_pipes.pipeline.stage.Stage" [arrowhead="empty", arrowtail="none"];
"cpg_pipes.pipeline.stage.SampleStage" -> "cpg_pipes.pipeline.stage.Stage" [arrowhead="empty", arrowtail="none"];
"cpg_pipes.hb.batch.Batch" -> "cpg_pipes.pipeline.pipeline.Pipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="batch", style="solid"];
"cpg_pipes.pipeline.cohort.Cohort" -> "cpg_pipes.pipeline.pipeline.Pipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cohort", style="solid"];
"cpg_pipes.pipeline.project.Project" -> "cpg_pipes.pipeline.pipeline.Pipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="analysis_project", style="solid"];
"cpg_pipes.pipeline.sample.Sample" -> "cpg_pipes.pipeline.stage.SampleStage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target", style="solid"];
"cpg_pipes.pipeline.project.Project" -> "cpg_pipes.pipeline.stage.ProjectStage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target", style="solid"];
"cpg_pipes.pipeline.cohort.Cohort" -> "cpg_pipes.pipeline.stage.CohortStage" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="target", style="solid"];
// "cpg_pipes.pipeline.stage.StageInput" [color="black", fontcolor="black", label="{StageInput|stage : str\l|add_other_stage_output(output: StageOutput)\las_dict(target, stage: StageDecorator): Dict[str, str]\las_dict_by_target(stage: StageDecorator): Dict[str, Dict[str, str]]\las_path(target, stage: StageDecorator, id: Optional[str]): str\las_path_by_target(stage: StageDecorator, id: Optional[str]): Dict[str, str]\las_path_dict(target, stage: StageDecorator): Dict[str, str]\las_path_dict_by_target(stage: StageDecorator): Dict[str, Dict[str, str]]\las_resource(target, stage: StageDecorator, id: Optional[str]): str\las_resource_by_target(stage: StageDecorator, id: Optional[str]): Dict[str, hb.Resource]\las_resource_dict(target, stage: StageDecorator): Dict[str, str]\las_resource_dict_by_target(stage: StageDecorator): Dict[str, Dict[str, hb.Resource]]\lget_jobs(): List[Job]\l}", shape="record", style="solid"];
// "cpg_pipes.pipeline.stage.StageOutput" [color="black", fontcolor="black", label="{StageOutput|data : Union\ljobs : List[Job]\lstage : str\ltarget : str\l|as_dict(): Dict[str, Union[str, hb.Resource]]\las_path(id): str\las_path_dict(): Dict[str, hb.Resource]\las_path_or_resource(id): Union[str, hb.Resource]\las_resource(id): \las_resource_dict(): Dict[str, hb.Resource]\l}", shape="record", style="solid"];
// "cpg_pipes.hb.resources.JobResource" [color="black", fontcolor="black", label="{JobResource|attach_disk_storage_gb : NoneType\lfraction_of_full : float\lmachine_type\l|get_java_mem_mb(): int\lget_mem_gb(): float\lget_ncpu(): int\lget_nthreads(): int\lget_storage_gb(): float\lset_to_job(j: Job): \l}", shape="record", style="solid"];
// "cpg_pipes.hb.resources.MachineType" [color="black", fontcolor="black", label="{MachineType|max_ncpu : int\lmem_gb_per_core : float\lmin_cpu : int\lname : str\lprice_per_hour : float\lthreads_on_cpu : int\l|adjust_ncpu(ncpu: int): int\lcalc_instance_disk_gb(): int\lfraction_to_ncpu(fraction: float): int\lmax_threads(): int\lmem_gb_to_ncpu(mem_gb: float): int\lnthreads_to_ncpu(nthreads: int): int\lrequest_resources(fraction: float, ncpu: int, nthreads: int, mem_gb: float, storage_gb: float, attach_disk_storage_gb: float): \lset_resources(j: Job, fraction: float, ncpu: int, nthreads: int, mem_gb: float, storage_gb: float, attach_disk_storage_gb: float): \lstorage_gb_to_ncpu(storage_gb: float): int\l}", shape="record", style="solid"];
// "cpg_pipes.hb.resources.MachineType" -> "cpg_pipes.hb.resources.JobResource" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="machine_type", style="solid"];
}
